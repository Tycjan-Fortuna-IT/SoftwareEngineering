openapi: 3.0.0
info:
  title: 'Software Engineering API'
  description: "API documentation for the Software Engineering project server.\n            This documentation is generated automatically using `OpenAPI 3.0.0` specification and OpenAPI Generator.\n            In case of any problems with (or suggestions for) the server API, please create an issue in the repository\n            of the project or contact our group on the specific thread on Discord, or contact us directly.\n            \n How to fetch the API:\n            \n- Using `Postman` runtime environment, send requests for manual testing of your implementation.\n            \n- Using the local server hosted at `https://localhost:3000`, send requests ONLY through `HTTPS` protocol.\n            \n\n            \nLink to the test server is: [`https://se-test-server.it-core.fun`](https://se-test-server.it-core.fun)"
  contact:
    name: wuetenderzucker
    email: 247028@edu.p.lodz.pl
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 1.0.0
servers:
  -
    url: 'https://se-test-server.it-core.fun'
    description: 'Test server for SE 2023/2024'
paths:
  /api/register:
    post:
      tags:
        - Authentication
      summary: 'Create and register a new user'
      description: 'Create a new user and register the user into the system. Before sending this request, you also need to retrieve a cookie with CSRF token (see later in the section: /api/sanctum/csrf-cookie).'
      operationId: 39284adbf891e1a4213c18dac4c4676e
      requestBody:
        description: 'Data needed for registration of the user'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: coolname123
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: jane.roe@gmail.com
                password:
                  type: string
                  format: password
                  maxLength: 255
                  minLength: 8
                  example: strongpassword123
                password_confirmation:
                  type: string
                  format: password
                  maxLength: 255
                  minLength: 8
                  example: strongpassword123
              type: object
      responses:
        '204':
          description: 'User has been registered successfully'
        '422':
          description: 'There has been a validation error'
  /api/login:
    post:
      tags:
        - Authentication
      summary: 'Sign in to the system'
      description: 'Sign in to the system and start a session. Before sending this request, you also need to retrieve a cookie with CSRF token (see later in the section: /api/sanctum/csrf-cookie).'
      operationId: 34f1f783921ad786b8cc02dd92e73ead
      requestBody:
        description: 'Data needed for signing in and starting a session'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: jane.roe@gmail.com
                password:
                  type: string
                  format: password
                  maxLength: 255
                  minLength: 8
                  example: strongpassword123
              type: object
      responses:
        '204':
          description: 'User has been signed in successfully'
        '422':
          description: 'There has been a validation error'
  /api/logout:
    post:
      tags:
        - Authentication
      summary: 'Sign out of the system'
      description: 'Sign out of the system and close the session.'
      operationId: a6966088db96360d68b647367a1c14af
      responses:
        '204':
          description: 'User has been signed out successfully'
  /api/user:
    get:
      tags:
        - Authentication
      summary: 'Retrieve currently signed in user'
      description: 'Retrieve details about the currently signed in user.'
      operationId: 16afd9cdc31bcbd6b564c8dc7209e20a
      responses:
        '200':
          description: 'User data obtained from the system'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/UserResource' }
                type: object
  /api/sanctum/csrf-cookie:
    get:
      tags:
        - Authentication
      summary: 'Retrieve a cookie with CSRF token'
      operationId: 15dbd4bcbd6ba739a8140e9add83843b
      responses:
        '204':
          description: 'Cookie has been set successfully'
  /api/users:
    get:
      tags:
        - User
      summary: 'Retrieve all users'
      description: 'Retrieve all users. Depending on whether the query parameters have been entered, obtain paginated or unpaginated response.'
      operationId: 07c2caac6bc2baf8680e8acb099b7165
      parameters:
        -
          $ref: '#/components/parameters/page'
        -
          $ref: '#/components/parameters/per_page'
        -
          $ref: '#/components/parameters/paginate'
      responses:
        '200':
          description: 'Users have been retrieved successfully'
          content:
            application/json:
              schema:
                type: object
              examples:
                'Paginated response':
                  summary: 'Paginated response'
                  value: { data: { uuid: 04776536-c79c-4baa-a3ba-db945d70c902, name: coolname123, email: jane.roe@gmail.com, created_at: '2023-10-29T15:25:45.000000Z', updated_at: '2023-10-29T15:25:45.000000Z' }, links: { first: 'http://localhost:8000/api/users?page=1', last: 'http://localhost:8000/api/users?page=15', prev: 'http://localhost:8000/api/users?page=4', next: 'http://localhost:8000/api/users?page=6' }, meta: { current_page: 1, from: 1, last_page: 1, per_page: 15, to: 15, total: 15, path: 'http://localhost:8000/api/users', links: [{ url: 'http://localhost:8000/api/users?page=1', label: 1, active: true }] } }
                'Not paginated response':
                  summary: 'Not paginated response'
                  value: { data: { uuid: 04776536-c79c-4baa-a3ba-db945d70c902, name: coolname123, email: jane.roe@gmail.com, created_at: '2023-10-29T15:25:45.000000Z', updated_at: '2023-10-29T15:25:45.000000Z' } }
  '/api/users/{uuid}':
    get:
      tags:
        - User
      summary: 'Retrieve a user'
      description: 'Retrieve the data of a user specified by UUID.'
      operationId: f0f60cff64378f05feac1f99acc50be1
      parameters:
        -
          $ref: '#/components/parameters/uuid_url_param'
      responses:
        '200':
          description: 'The user has been retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/UserResource' }
                type: object
        '404':
          description: 'User has not been found'
    put:
      tags:
        - User
      summary: 'Update a user'
      description: 'Update the data of a user specified by UUID.'
      operationId: ea74043be320c5de5ca69fc312c70cf8
      parameters:
        -
          $ref: '#/components/parameters/uuid_url_param'
      requestBody:
        description: 'User data required for the update'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: coolname123
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: jane.roe@gmail.com
                password:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: strongpassword123
                password_confirmation:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: strongpassword123
              type: object
      responses:
        '200':
          description: 'User has been updated successfully'
        '404':
          description: 'User has not been found'
        '422':
          description: 'There has been a validation error'
    delete:
      tags:
        - User
      summary: 'Delete a user'
      description: 'Delete a user specified by UUID.'
      operationId: 77f0671ff8bd87ef80aa78574045c301
      parameters:
        -
          $ref: '#/components/parameters/uuid_url_param'
      responses:
        '200':
          description: 'User has been deleted successfully'
        '404':
          description: 'User has not been found'
components:
  schemas:
    LinksResponsePart:
      title: LinksResponsePart
      description: 'A part of successfully paginated response that contains links to other pages.'
      properties:
        first:
          type: string
          example: 'http://localhost:8000/api/users?page=1'
        last:
          type: string
          example: 'http://localhost:8000/api/users?page=15'
        prev:
          type: string
          example: 'http://localhost:8000/api/users?page=4'
        next:
          type: string
          example: 'http://localhost:8000/api/users?page=6'
      type: object
    MetaResponsePart:
      title: MetaResponsePart
      description: 'A part of successfully paginated response that contains metadata.'
      properties:
        current_page:
          type: integer
          example: 1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 15
        per_page:
          type: integer
          example: 15
        to:
          type: integer
          example: 15
        total:
          type: integer
          example: 15
        path:
          type: string
          example: 'http://localhost:8000/api/users'
        links:
          type: array
          items:
            properties:
              url:
                type: string
                example: 'http://localhost:8000/api/users?page=1'
              label:
                type: string
                example: '1'
              active:
                type: boolean
                example: true
            type: object
      type: object
    UserResource:
      title: UserResource
      description: 'Registered user that uses the system'
      properties:
        uuid:
          type: string
          format: uuid
          example: 04776536-c79c-4baa-a3ba-db945d70c902
        name:
          type: string
          maxLength: 255
          example: coolname123
        email:
          description: 'Has to be lowercase'
          type: string
          format: email
          maxLength: 255
          example: jane.roe@gmail.com
        created_at:
          type: string
          format: date-time
          example: '2023-10-29T15:25:45.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-10-29T15:25:45.000000Z'
      type: object
  parameters:
    uuid_url_param:
      name: uuid
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 04776536-c79c-4baa-a3ba-db945d70c902
    filter_by_user_uuid_param:
      name: 'filter[user_uuid]'
      in: query
      description: 'Allows for filtering resources by the UUID of the user'
      required: false
      schema:
        type: string
        format: uuid
        example: 04776536-c79c-4baa-a3ba-db945d70c902
    filter_by_user_uuid_param_required:
      name: 'filter[user_uuid]'
      in: query
      description: 'Allows for filtering resources by the UUID of the user'
      required: true
      schema:
        type: string
        format: uuid
        example: 04776536-c79c-4baa-a3ba-db945d70c902
    filter_by_type_param:
      name: 'filter[type]'
      in: query
      description: 'Allows for filtering resources by their exact type'
      required: false
      schema:
        type: integer
        format: int32
        example: 1
    page:
      name: page
      in: query
      description: 'If pagination is enabled, returns a specified page of the data resources'
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    per_page:
      name: per_page
      in: query
      description: 'If pagination is enabled, returns a specified number of data resources per page'
      required: false
      schema:
        type: integer
        format: int32
        default: 15
    paginate:
      name: paginate
      in: query
      description: 'If pagination is enabled, returns paginated data resources'
      required: false
      schema:
        type: boolean
        default: true
tags:
  -
    name: Authentication
    description: 'Operations related to authentication'
  -
    name: User
    description: 'Operations related to users'
externalDocs:
  description: 'Repository of the project (backend)'
  url: 'https://github.com/Tycjan-Fortuna-IT/SoftwareEngineering'
